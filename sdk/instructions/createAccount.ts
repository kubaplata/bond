/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  BondingCurveMode,
  bondingCurveModeBeet,
} from '../types/BondingCurveMode'

/**
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export type CreateAccountInstructionArgs = {
  displayName: string
  bondingCurveMode: BondingCurveMode
}
/**
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export const createAccountStruct = new beet.FixableBeetArgsStruct<
  CreateAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['displayName', beet.utf8String],
    ['bondingCurveMode', bondingCurveModeBeet],
  ],
  'CreateAccountInstructionArgs'
)
/**
 * Accounts required by the _createAccount_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] rampProtocol
 * @property [_writable_] userRampAccount
 * @property [_writable_] userRampAccountVault
 * @property [_writable_] personalMarket
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export type CreateAccountInstructionAccounts = {
  user: web3.PublicKey
  rampProtocol: web3.PublicKey
  userRampAccount: web3.PublicKey
  userRampAccountVault: web3.PublicKey
  personalMarket: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAccountInstructionDiscriminator = [
  99, 20, 130, 119, 196, 235, 131, 149,
]

/**
 * Creates a _CreateAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export function createCreateAccountInstruction(
  accounts: CreateAccountInstructionAccounts,
  args: CreateAccountInstructionArgs,
  programId = new web3.PublicKey('EXSphcPS7fXSnmVPqo8Q5Hax5yRnc3t4MFWD1NozvMro')
) {
  const [data] = createAccountStruct.serialize({
    instructionDiscriminator: createAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rampProtocol,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userRampAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userRampAccountVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.personalMarket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
