/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitializeRamp
 * @category generated
 */
export const initializeRampStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitializeRampInstructionArgs'
)
/**
 * Accounts required by the _initializeRamp_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] ramp
 * @property [_writable_] defaultStakePool
 * @property [_writable_] defaultLst
 * @category Instructions
 * @category InitializeRamp
 * @category generated
 */
export type InitializeRampInstructionAccounts = {
  admin: web3.PublicKey
  ramp: web3.PublicKey
  defaultStakePool: web3.PublicKey
  defaultLst: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initializeRampInstructionDiscriminator = [
  161, 138, 98, 249, 193, 137, 94, 83,
]

/**
 * Creates a _InitializeRamp_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitializeRamp
 * @category generated
 */
export function createInitializeRampInstruction(
  accounts: InitializeRampInstructionAccounts,
  programId = new web3.PublicKey('EXSphcPS7fXSnmVPqo8Q5Hax5yRnc3t4MFWD1NozvMro')
) {
  const [data] = initializeRampStruct.serialize({
    instructionDiscriminator: initializeRampInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ramp,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.defaultStakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.defaultLst,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
