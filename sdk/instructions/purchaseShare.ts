/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category PurchaseShare
 * @category generated
 */
export type PurchaseShareInstructionArgs = {
  seller: web3.PublicKey
}
/**
 * @category Instructions
 * @category PurchaseShare
 * @category generated
 */
export const purchaseShareStruct = new beet.BeetArgsStruct<
  PurchaseShareInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['seller', beetSolana.publicKey],
  ],
  'PurchaseShareInstructionArgs'
)
/**
 * Accounts required by the _purchaseShare_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] rampUserAccount
 * @property [_writable_] rampUserAccountLstVault
 * @property [_writable_] rampUserAccountVault
 * @property [_writable_] sellerUserAccount
 * @property [_writable_] personalMarket
 * @property [_writable_] marketCurrency
 * @property [_writable_] stakePool
 * @property [_writable_] withdrawAuthority
 * @property [_writable_] stakeReserve
 * @property [_writable_] managerFeeAccount
 * @property [_writable_] stakePoolProgram
 * @property [] stakeProgram
 * @category Instructions
 * @category PurchaseShare
 * @category generated
 */
export type PurchaseShareInstructionAccounts = {
  user: web3.PublicKey
  rampUserAccount: web3.PublicKey
  rampUserAccountLstVault: web3.PublicKey
  rampUserAccountVault: web3.PublicKey
  sellerUserAccount: web3.PublicKey
  personalMarket: web3.PublicKey
  marketCurrency: web3.PublicKey
  stakePool: web3.PublicKey
  withdrawAuthority: web3.PublicKey
  stakeReserve: web3.PublicKey
  managerFeeAccount: web3.PublicKey
  stakePoolProgram: web3.PublicKey
  stakeProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const purchaseShareInstructionDiscriminator = [
  193, 117, 254, 174, 249, 196, 127, 32,
]

/**
 * Creates a _PurchaseShare_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PurchaseShare
 * @category generated
 */
export function createPurchaseShareInstruction(
  accounts: PurchaseShareInstructionAccounts,
  args: PurchaseShareInstructionArgs,
  programId = new web3.PublicKey('EXSphcPS7fXSnmVPqo8Q5Hax5yRnc3t4MFWD1NozvMro')
) {
  const [data] = purchaseShareStruct.serialize({
    instructionDiscriminator: purchaseShareInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rampUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rampUserAccountLstVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.rampUserAccountVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sellerUserAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.personalMarket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.marketCurrency,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.withdrawAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeReserve,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerFeeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakePoolProgram,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
