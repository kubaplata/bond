/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * EmptyError: ''
 *
 * @category Errors
 * @category generated
 */
export class EmptyErrorError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'EmptyError'
  constructor() {
    super('')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new EmptyErrorError())
createErrorFromNameLookup.set('EmptyError', () => new EmptyErrorError())

/**
 * InvalidWithdrawAuthority: 'Invalid withdraw authority provided with the instruction.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidWithdrawAuthorityError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidWithdrawAuthority'
  constructor() {
    super('Invalid withdraw authority provided with the instruction.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidWithdrawAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidWithdrawAuthorityError())
createErrorFromNameLookup.set(
  'InvalidWithdrawAuthority',
  () => new InvalidWithdrawAuthorityError()
)

/**
 * InvalidStakePoolProgram: 'Invalid Stake Pool program ID.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakePoolProgramError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidStakePoolProgram'
  constructor() {
    super('Invalid Stake Pool program ID.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakePoolProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidStakePoolProgramError())
createErrorFromNameLookup.set(
  'InvalidStakePoolProgram',
  () => new InvalidStakePoolProgramError()
)

/**
 * InvalidStakeProgram: 'Invalid Stake program ID.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeProgramError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidStakeProgram'
  constructor() {
    super('Invalid Stake program ID.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidStakeProgramError())
createErrorFromNameLookup.set(
  'InvalidStakeProgram',
  () => new InvalidStakeProgramError()
)

/**
 * LstPreMinted: 'Personal LST cannot be pre-minted.'
 *
 * @category Errors
 * @category generated
 */
export class LstPreMintedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'LstPreMinted'
  constructor() {
    super('Personal LST cannot be pre-minted.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LstPreMintedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new LstPreMintedError())
createErrorFromNameLookup.set('LstPreMinted', () => new LstPreMintedError())

/**
 * InvalidLstDecimals: 'LST decimals have to equal SOL decimals, 9.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLstDecimalsError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidLstDecimals'
  constructor() {
    super('LST decimals have to equal SOL decimals, 9.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLstDecimalsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidLstDecimalsError())
createErrorFromNameLookup.set(
  'InvalidLstDecimals',
  () => new InvalidLstDecimalsError()
)

/**
 * InvalidLstAuthority: 'Invalid LST authorities. Make sure the token cannot be frozen.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidLstAuthorityError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidLstAuthority'
  constructor() {
    super('Invalid LST authorities. Make sure the token cannot be frozen.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidLstAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new InvalidLstAuthorityError())
createErrorFromNameLookup.set(
  'InvalidLstAuthority',
  () => new InvalidLstAuthorityError()
)

/**
 * InvalidShareSeller: 'Seller does not own any shares.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidShareSellerError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidShareSeller'
  constructor() {
    super('Seller does not own any shares.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidShareSellerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidShareSellerError())
createErrorFromNameLookup.set(
  'InvalidShareSeller',
  () => new InvalidShareSellerError()
)

/**
 * InvalidShareBalance: 'Seller does not have enough shares to sell.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidShareBalanceError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidShareBalance'
  constructor() {
    super('Seller does not have enough shares to sell.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidShareBalanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidShareBalanceError())
createErrorFromNameLookup.set(
  'InvalidShareBalance',
  () => new InvalidShareBalanceError()
)

/**
 * PoolMintMismatch: 'Provided LST mint does not match Stake Pool mint.'
 *
 * @category Errors
 * @category generated
 */
export class PoolMintMismatchError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'PoolMintMismatch'
  constructor() {
    super('Provided LST mint does not match Stake Pool mint.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolMintMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new PoolMintMismatchError())
createErrorFromNameLookup.set(
  'PoolMintMismatch',
  () => new PoolMintMismatchError()
)

/**
 * PoolManagerMismatch: 'Provided Stake Pool manager is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class PoolManagerMismatchError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'PoolManagerMismatch'
  constructor() {
    super('Provided Stake Pool manager is invalid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolManagerMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new PoolManagerMismatchError())
createErrorFromNameLookup.set(
  'PoolManagerMismatch',
  () => new PoolManagerMismatchError()
)

/**
 * PoolReserveMismatch: 'Provided Stake Pool reserve is invalid.'
 *
 * @category Errors
 * @category generated
 */
export class PoolReserveMismatchError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'PoolReserveMismatch'
  constructor() {
    super('Provided Stake Pool reserve is invalid.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PoolReserveMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new PoolReserveMismatchError())
createErrorFromNameLookup.set(
  'PoolReserveMismatch',
  () => new PoolReserveMismatchError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
