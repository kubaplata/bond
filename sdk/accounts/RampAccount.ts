/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Share, shareBeet } from '../types/Share'

/**
 * Arguments used to create {@link RampAccount}
 * @category Accounts
 * @category generated
 */
export type RampAccountArgs = {
  id: beet.bignum
  vault: web3.PublicKey
  displayName: string
  heldShares: Share[]
  personalMarket: web3.PublicKey
  personalStakePool: beet.COption<web3.PublicKey>
  personalLst: beet.COption<web3.PublicKey>
}

export const rampAccountDiscriminator = [225, 181, 38, 249, 28, 105, 184, 93]
/**
 * Holds the data for the {@link RampAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class RampAccount implements RampAccountArgs {
  private constructor(
    readonly id: beet.bignum,
    readonly vault: web3.PublicKey,
    readonly displayName: string,
    readonly heldShares: Share[],
    readonly personalMarket: web3.PublicKey,
    readonly personalStakePool: beet.COption<web3.PublicKey>,
    readonly personalLst: beet.COption<web3.PublicKey>
  ) {}

  /**
   * Creates a {@link RampAccount} instance from the provided args.
   */
  static fromArgs(args: RampAccountArgs) {
    return new RampAccount(
      args.id,
      args.vault,
      args.displayName,
      args.heldShares,
      args.personalMarket,
      args.personalStakePool,
      args.personalLst
    )
  }

  /**
   * Deserializes the {@link RampAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [RampAccount, number] {
    return RampAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link RampAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<RampAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find RampAccount account at ${address}`)
    }
    return RampAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'EXSphcPS7fXSnmVPqo8Q5Hax5yRnc3t4MFWD1NozvMro'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, rampAccountBeet)
  }

  /**
   * Deserializes the {@link RampAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [RampAccount, number] {
    return rampAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link RampAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return rampAccountBeet.serialize({
      accountDiscriminator: rampAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link RampAccount} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RampAccountArgs) {
    const instance = RampAccount.fromArgs(args)
    return rampAccountBeet.toFixedFromValue({
      accountDiscriminator: rampAccountDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link RampAccount} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RampAccountArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      RampAccount.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link RampAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      id: (() => {
        const x = <{ toNumber: () => number }>this.id
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      vault: this.vault.toBase58(),
      displayName: this.displayName,
      heldShares: this.heldShares,
      personalMarket: this.personalMarket.toBase58(),
      personalStakePool: this.personalStakePool,
      personalLst: this.personalLst,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const rampAccountBeet = new beet.FixableBeetStruct<
  RampAccount,
  RampAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['id', beet.u64],
    ['vault', beetSolana.publicKey],
    ['displayName', beet.utf8String],
    ['heldShares', beet.array(shareBeet)],
    ['personalMarket', beetSolana.publicKey],
    ['personalStakePool', beet.coption(beetSolana.publicKey)],
    ['personalLst', beet.coption(beetSolana.publicKey)],
  ],
  RampAccount.fromArgs,
  'RampAccount'
)
